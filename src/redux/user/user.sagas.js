import {takeLatest,put, all, call} from 'redux-saga/effects';import { auth, googleProvider, createUserProfileDocuments, getCurrentUser } from "../../firebase/firebase.utils";import UserActionTypes from "./user.types";import {signInSuccess, signInFailure, signOutSuccess, signUpSuccess, signOutFailure} from "./user-actions";/* Bcz of our subscriber is Here our subscription is always listening to the auth   and auth send them that user authentication obj everytime until they sign out.   And Here we're leveraging the same code in email and google sign into a single function   returning userAuth to both*/export function* getSnapshotFromUserAuth(userAuth, additionalData) {    try{        const userRef = yield call(createUserProfileDocuments, userAuth, additionalData);        const userSnapshot = yield userRef.get();        yield put(signInSuccess({ id: userSnapshot.id, ...userSnapshot.data() })        )    } catch (error) {        yield put(signInFailure(error));    }}// execute google sign after clicking the buttonexport function* signInWithGoogle() {    try {        // Setting Up the Action to authentication of user login via google        const {user} = yield auth.signInWithPopup(googleProvider);        yield getSnapshotFromUserAuth(user);    } catch (error) {        yield put(signInFailure(error));    }}// execute Email sign after clicking the buttonexport function* signInWithEmail({ payload: {email, password} }) {    try {        // it will return the same type of obj as it return in signInWithGoogle        const { user } = yield auth.signInWithEmailAndPassword(email, password);        // same as we did earlier        yield getSnapshotFromUserAuth(user);    } catch (error) {        yield put(signInFailure(error));    }}// getting info of user session is on or notexport function* isUserAuthenticated() {    try{        // calling get user from utils        const userAuth = yield getCurrentUser();        if(!userAuth) return;        yield getSnapshotFromUserAuth(userAuth);    } catch (error) {        yield put(signInFailure(error));    }}// generator for sign outexport function* signOut() {    try{        yield auth.signOut();        yield put(signOutSuccess());    } catch (error) {        yield put(signOutFailure(error))    }}// generator for sign upexport function* signUp( {payload: { email, password, displayName }} ) {    try {        const {user} = yield auth.createUserWithEmailAndPassword(email, password);        yield put(signUpSuccess({user, additionalData: {displayName} }));    } catch (error) {        yield put(signOutFailure(error));    }}// generator for sign up after sign up successexport function* signInAfterSignUp({payload: {user, additionalData}}) {    yield getSnapshotFromUserAuth(user, additionalData);}/* ON FUNCTIONS*/// start sign-in with googleexport function* onGoogleSignInStart() {    yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START,signInWithGoogle);}// start sign-in with Email and passwordexport function* onEmailSignInStart() {     yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START, signInWithEmail);}// listening to this function to check the user is into the session or notexport function* onCheckUserSession() {    yield takeLatest(UserActionTypes.CHECK_USER_SESSION, isUserAuthenticated);}// saga function to start sign outexport function* onSignOutStart() {    yield takeLatest(UserActionTypes.SIGN_OUT_START, signOut);}// saga function for start sign up processexport function* onSignUpStart() {    yield takeLatest(UserActionTypes.SIGN_UP_START, signUp);}// After Sign Up the user informationexport function* onSignUpSuccess() {    yield takeLatest(UserActionTypes.SIGN_UP_SUCCESS, signInAfterSignUp);}// root saga functionexport function* userSagas() {    yield all([        call(onGoogleSignInStart),        call(onEmailSignInStart),        call(onCheckUserSession),        call(onSignOutStart),        call(onSignUpStart),        call(onSignUpSuccess)]    );}