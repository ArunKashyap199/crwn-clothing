import {takeLatest,put, all, call} from 'redux-saga/effects';import { auth, googleProvider, createUserProfileDocuments } from "../../firebase/firebase.utils";import UserActionTypes from "./user.types";import {signInSuccess, signInFailure} from "./user-actions";// leveraging the same code in email and google sign into a single function// returning userAuth to bothexport function* getSnapshotFromUserAuth(userAuth) {    try{        const userRef = yield call(createUserProfileDocuments, userAuth);        const userSnapshot = yield userRef.get();        yield put(signInSuccess({ id: userSnapshot.id, ...userSnapshot.data() })        )    } catch (error) {        yield put(signInFailure(error));    }}// execute google sign after clicking the buttonexport function* signInWithGoogle() {    try {        // Setting Up the Action to authentication of user login via google        const {user} = yield auth.signInWithPopup(googleProvider);        yield getSnapshotFromUserAuth(user);    } catch (error) {        yield put(signInFailure(error));    }}// execute Email sign after clicking the buttonexport function* signInWithEmail({ payload: {email, password} }) {    try {        // it will return the same type of obj as it return in signInWithGoogle        const { user } = yield auth.signInWithEmailAndPassword(email, password);        // same as we did earlier        yield getSnapshotFromUserAuth(user);    } catch (error) {        yield put(signInFailure(error));    }}// start sign-in with googleexport function* onGoogleSignInStart() {    yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START,signInWithGoogle);}// start sign-in with Email and passwordexport function* onEmailSignInStart() {     yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START, signInWithEmail)}// root saga functionexport function* userSagas() {    yield all([call(onGoogleSignInStart),call(onEmailSignInStart)]);}